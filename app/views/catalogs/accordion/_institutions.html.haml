-# Copyright Â© 2011-2019 MUSC Foundation for Research Development
-# All rights reserved.

-# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

-# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

-# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
-# disclaimer in the documentation and/or other materials provided with the distribution.

-# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products
-# derived from this software without specific prior written permission.

-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
-# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
-# SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
-# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

- include_external = params[:include_external] == 'true'

.accordion#institutionAccordion
  - if identity_signed_in?
    .card-body.pb-0
      = check_box_tag :include_external, true, include_external, data: { toggle: 'toggle', on: t('proper.catalog.accordion.toggle.include_external'), off: t('proper.catalog.accordion.toggle.internal_only'), style: 'btn-block' }

    -# Get all shards BUT put the user's hub first and sort the rest by hub name
    - universities = [current_user.university]

    - if include_external
      - University.where.not(id: current_user.university).order(:name).each{ |u| universities.append(u) }
  - else
    -# Get all shards sorted by hub name
    - universities = University.all.order(:name)

  - universities.each do |university|
    - shard = university.key

    .card-body
      - Octopus.using(shard) do
        -# Only keep track of shard when not logged in
        - shard_name    = shard.capitalize
        - external      = identity_signed_in? && shard != current_user.shard_identifier
        - locked_ids    = locked_org_ids[shard] || []
        - institutions  = catalog_institutions(shard, external)

        - if institutions.any?
          %h5
            = university.name

          - institutions.each_with_index do |inst, index|
            - locked  = locked_ids.include?(inst.id)
            - expand  = (@institution.present? && @institution == inst) || identity_signed_in? && !include_external && index == 0 && shard == current_user.shard_identifier

            - if locked
              - url = locked_organization_catalogs_path(organization_id: inst.id, shard: shard, srid: service_request.try(:id))
            - else
              - url = update_description_catalogs_path(organization_id: inst.id, shard: shard, srid: service_request.try(:id))

            .card.institution{ id: "institution#{shard_name}#{inst.id}" }
              .card-header.p-0{ id: "institution#{shard_name}#{inst.id}Header" }
                -# Expand the first institution if the user is signed in
                %button.institution-link.org-link.btn.btn-block{ class: [css_class(inst), expand ? '' : 'collapsed', locked ? 'locked' : ''], type: 'button', data: { toggle: 'collapse', target: "#institution#{shard_name}#{inst.id}Collapse", url: url }, aria: { expanded: expand.to_s, controls: "institution#{shard_name}#{inst.id}Collapse" } }
                  %h6.d-flex.align-items-start.mb-0
                    = organization_name_display(inst, locked, inst.org_children.any?)
              -# Expand the first institution if the user is signed in
              .collapse{ class: expand ? 'show' : '', id: "institution#{shard_name}#{inst.id}Collapse", data: { parent: '#institutionAccordion' }, aria: { labelledby: "institution#{shard_name}#{inst.id}Header" } }
                .card-body
                  = render 'catalogs/accordion/providers', service_request: service_request, locked_ids: locked_ids, inst: inst, shard_name: shard_name, shard: shard, external: external
